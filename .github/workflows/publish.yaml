name: Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-build-${{ hashFiles('**/requirements-dev.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-build-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install build twine

    - name: Run tests
      run: pytest -v

    - name: Run linting
      run: |
        black --check .
        ruff check .
        mypy .

    - name: Validate package metadata
      run: |
        python -m build
        twine check dist/*

  build:
    needs: validate
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-build-${{ hashFiles('**/requirements-dev.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-build-

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-test:
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.test_pypi == 'true'
    environment: test-pypi
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        verbose: true

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: pypi
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  create-github-release:
    needs: publish-pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        generate_release_notes: true
        token: ${{ secrets.GITHUB_TOKEN }}